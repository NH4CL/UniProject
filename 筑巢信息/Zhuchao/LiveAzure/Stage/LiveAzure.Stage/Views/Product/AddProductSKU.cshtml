@{
    Layout = null;
}
@model LiveAzure.Models.Product.ProductInfoItem
<script src="@Url.Content("~/Scripts/jquery.validate.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")" type="text/javascript"></script>
<script type="text/javascript">
    function saveAddSuccess() {
        //$("#productSKUAdd").fadeOut("fast");
        //$("#productSKUEdit").fadeOut("fast");
        $("#productSKUAdd").html("");
        $("#productSKUEdit").html("");
        $.ajax({
            type: "POST",
            url: "/Product/ProductSKUGrid",
            success: function (html) {
                $("#tabGrid").html(html);
            }
        });
    }
    /*-----------------------------------
    验证SKU Code
    -----------------------------------*/
    function validateCode() {
        var Code = document.getElementById("Code").value;
        var replaceReg = document.getElementById("RegexCode").value;
        var reg = eval("/" + replaceReg + "/"); 
        var validate = Code.search(reg); 
        if (validate == -1) {
            $("#validateCode").html("@Html.Raw(LiveAzure.Resource.Stage.ProductController.ValidateSkuCode)");
            return false;
        } else {
            $("#validateCode").html("");
        }    
    }
    /*-----------------------------------
    验证Barcode
    -----------------------------------*/
    function validateBarcode() {
        var Barcode = document.getElementById("Barcode").value;
        var replaceReg = document.getElementById("RegexBarcode").value;
        var reg = eval("/" + replaceReg + "/");
        var validate = Barcode.search(reg);
        if (validate == -1) {
            $("#validateBarcode").html("@Html.Raw(LiveAzure.Resource.Stage.ProductController.ValidateBarcode)");
            return false;
        } else {
            $("#validateBarcode").html("");
        }
    }
    /*-----------------------------------
    验证StdUnit
    -----------------------------------*/
    function validateStdUnit() {
        var StdUnit = document.getElementById("StdUnit").value;
        var alertStdUnit = "@Html.Raw(LiveAzure.Resource.Stage.ProductController.AlertStdUnit)";        
        if (StdUnit == null) {
            alert(alertStdUnit);
            return false;
        }     
    }
</script>
@using (Ajax.BeginForm("SaveAddProductSKU", "Product", new AjaxOptions { UpdateTargetId = "tabGrid",OnBegin="validateStdUnit", OnSuccess = "saveAddSuccess" }, new { id = "productSKUAddForm" }))
{ 
<div class="down_AddorEdit">
    <table class="DIY_table">
        <tr>
            <th>
                @Html.Label(LiveAzure.Resource.Model.Product.ProductInfoItem.Code)
            </th>
            <td>
                <input id="Code" name="Code" type="text" onblur="validateCode()" /><span id="validateCode"></span>
                <input id="RegexCode" type="hidden" value="@ViewBag.regexCode" />
            </td>
            <th>
                @Html.Label(LiveAzure.Resource.Model.Product.ProductInfoItem.Barcode)
            </th>
            <td>
                <input id="Barcode" name="Barcode" type="text" onblur="validateBarcode()" /><span id="validateBarcode"></span>
                <input id="RegexBarcode" type="hidden" value="@ViewBag.regexBarcode" />
            </td>
        </tr>
        <tr>
            <th>
                @Html.Label(LiveAzure.Resource.Model.Product.ProductInfoItem.CodeEx1)
            </th>
            <td>
                @Html.EditorFor(model => model.CodeEx1)
                @Html.ValidationMessageFor(model => model.CodeEx1)
            </td>
            <th>
                @Html.Label(LiveAzure.Resource.Model.Product.ProductInfoItem.FullName)
            </th>
            <td>
                @Html.EditorFor(model => model.FullName,"Matter")
                @Html.ValidationMessageFor(model => model.FullName.Matter)
            </td>
        </tr>
        <tr>
            <th>
                @Html.Label(LiveAzure.Resource.Model.Product.ProductInfoItem.ShortName)
            </th>
            <td>
                @Html.EditorFor(model => model.ShortName,"Matter")
                @Html.ValidationMessageFor(model => model.ShortName.Matter)
            </td>
            <th>
                @Html.Label(LiveAzure.Resource.Model.Product.ProductInfoItem.StdUnit)
            </th>
            <td>
                @Html.DropDownListFor(model => model.StdUnit, ViewBag.modelList as List<SelectListItem>)
            </td>
        </tr>
        <tr>
            <th>
                @Html.Label(LiveAzure.Resource.Model.Product.ProductInfoItem.Specification)
            </th>
            <td>
                @Html.EditorFor(model => model.Specification,"Matter")
                @Html.ValidationMessageFor(model => model.Specification)
            </td>
            <th>
                @Html.Label(LiveAzure.Resource.Model.Product.ProductInfoItem.Percision)
            </th>
            <td>
                @Html.EditorFor(model => model.Percision)
                @Html.ValidationMessageFor(model => model.Percision)
            </td>
        </tr>
        <tr>
            <th>
                @Html.Label(LiveAzure.Resource.Model.Product.ProductInfoItem.MarketPrice)
            </th>
            <td>
                @Html.EditorFor(model => model.MarketPrice,"Cash")
                @Html.ValidationMessageFor(model => model.MarketPrice.Matter)
            </td>
            <th>
                @Html.Label(LiveAzure.Resource.Model.Product.ProductInfoItem.SuggestPrice)
            </th>
            <td>
                @Html.EditorFor(model => model.SuggestPrice,"Cash")
                @Html.ValidationMessageFor(model => model.SuggestPrice.Matter)
            </td>    
        </tr>
        <tr>
            <th>
                @Html.Label(LiveAzure.Resource.Model.Product.ProductInfoItem.LowestPrice)
            </th>
            <td>
                @Html.EditorFor(model => model.LowestPrice,"Cash")
                @Html.ValidationMessageFor(model => model.LowestPrice.Matter)
            </td>
            <th>
                @Html.Label(LiveAzure.Resource.Model.Product.ProductInfoItem.GrossWeight)
            </th>
            <td>
                @Html.EditorFor(model => model.GrossWeight)
                @Html.ValidationMessageFor(model => model.GrossWeight)
            </td>
        </tr>
        <tr>
            <th>
                @Html.Label(LiveAzure.Resource.Model.Product.ProductInfoItem.NetWeight)
            </th>
            <td>
                @Html.EditorFor(model => model.NetWeight)
                @Html.ValidationMessageFor(model => model.NetWeight)
            </td>
            <th>
                @Html.Label(LiveAzure.Resource.Model.Product.ProductInfoItem.GrossVolume)
            </th>
            <td>
                @Html.EditorFor(model => model.GrossVolume)
                @Html.ValidationMessageFor(model => model.GrossVolume)
            </td>
        </tr>
        <tr>
            <th>
                @Html.Label(LiveAzure.Resource.Model.Product.ProductInfoItem.NetVolume)
            </th>
            <td>
                @Html.EditorFor(model => model.NetVolume)
                @Html.ValidationMessageFor(model => model.NetVolume)
            </td>
            <th>
                @Html.Label(LiveAzure.Resource.Model.Product.ProductInfoItem.NetPiece)
            </th>
            <td>
                @Html.EditorFor(model => model.NetPiece)
                @Html.ValidationMessageFor(model => model.NetPiece)
            </td>
        </tr>
        <tr>
            <th>
                @Html.Label(LiveAzure.Resource.Model.ModelBase.Remark)
            </th>
            <td>
                @Html.TextAreaFor(model => model.Remark)
                @Html.ValidationMessageFor(model => model.Remark)
            </td>
        </tr>
    </table>
    <div>
        <input type="submit" value="@LiveAzure.Resource.Common.Save" />
        <input type="reset" value="@LiveAzure.Resource.Common.Reset" />
    </div>
</div>
}
